/*
 * Pacman Clone
 *
 * Copyright (c) 2021 Amanch Esmailzadeh
 */

#ifndef COMMON_H
#define COMMON_H

#include <stdbool.h>

#define DEFAULT_WINDOW_WIDTH 1024
#define DEFAULT_WINDOW_HEIGHT 576
#define DEFAULT_FRAMEBUFFER_WIDTH 512
#define DEFAULT_FRAMEBUFFER_HEIGHT 288

#define IGNORED_VARIABLE(v) (void)v

#define MIN(a, b) (((a) <= (b)) ? (a) : (b))
#define MAX(a, b) (((a) >= (b)) ? (a) : (b))
#define CLAMP(v, m0, m1) MAX((m0), MIN((v), (m1)))
#define LERP(t, vmin, vmax) (1.0f - (t)) * (vmin) + ((vmax) * (t))

typedef uint32_t bool32;

typedef struct {
    bool32 running;
    float elapsed;
    float target;
} Timer;

typedef struct {
    int32_t x;
    int32_t y;
    int32_t width;
    int32_t height;
} Rect;

enum {
    GHOST_BLINKY,
    GHOST_PINKY,
    GHOST_CLYDE,
    GHOST_INKY,

    GHOST_COUNT
};

typedef enum {
    ATLAS_SPRITE_EMPTY,
    ATLAS_SPRITE_PLAYER_FRAME1,
    ATLAS_SPRITE_PLAYER_FRAME2,
    ATLAS_SPRITE_BLINKY_FRAME1,
    ATLAS_SPRITE_BLINKY_FRAME2,
    ATLAS_SPRITE_PINKY_FRAME1,
    ATLAS_SPRITE_PINKY_FRAME2,
    ATLAS_SPRITE_INKY_FRAME1,
    ATLAS_SPRITE_INKY_FRAME2,
    ATLAS_SPRITE_CLYDE_FRAME1,
    ATLAS_SPRITE_CLYDE_FRAME2,
    ATLAS_SPRITE_GHOST_EATEN_UP_FRAME1,
    ATLAS_SPRITE_GHOST_EATEN_UP_FRAME2,
    ATLAS_SPRITE_GHOST_EATEN_LEFT_FRAME1,
    ATLAS_SPRITE_GHOST_EATEN_LEFT_FRAME2,
    ATLAS_SPRITE_GHOST_EATEN_DOWN_FRAME1,
    ATLAS_SPRITE_GHOST_EATEN_DOWN_FRAME2,
    ATLAS_SPRITE_GHOST_EATEN_RIGHT_FRAME1,
    ATLAS_SPRITE_GHOST_EATEN_RIGHT_FRAME2,
    ATLAS_SPRITE_GHOST_EATEN_FRAME3,
    ATLAS_SPRITE_GHOST_FRIGHTENED_FRAME1,
    ATLAS_SPRITE_GHOST_FRIGHTENED_FRAME2,
    ATLAS_SPRITE_GHOST_HOUSE_GATE,
    ATLAS_SPRITE_WALL_NORMAL,
    ATLAS_SPRITE_WALL_BOTTOM,
    ATLAS_SPRITE_PELLET,
    ATLAS_SPRITE_POWER_PELLET,
    ATLAS_SPRITE_A,
    ATLAS_SPRITE_B,
    ATLAS_SPRITE_C,
    ATLAS_SPRITE_D,
    ATLAS_SPRITE_E,
    ATLAS_SPRITE_F,
    ATLAS_SPRITE_G,
    ATLAS_SPRITE_H,
    ATLAS_SPRITE_I,
    ATLAS_SPRITE_J,
    ATLAS_SPRITE_K,
    ATLAS_SPRITE_L,
    ATLAS_SPRITE_M,
    ATLAS_SPRITE_N,
    ATLAS_SPRITE_O,
    ATLAS_SPRITE_P,
    ATLAS_SPRITE_Q,
    ATLAS_SPRITE_R,
    ATLAS_SPRITE_S,
    ATLAS_SPRITE_T,
    ATLAS_SPRITE_U,
    ATLAS_SPRITE_V,
    ATLAS_SPRITE_W,
    ATLAS_SPRITE_X,
    ATLAS_SPRITE_Y,
    ATLAS_SPRITE_Z,
    ATLAS_SPRITE_0,
    ATLAS_SPRITE_1,
    ATLAS_SPRITE_2,
    ATLAS_SPRITE_3,
    ATLAS_SPRITE_4,
    ATLAS_SPRITE_5,
    ATLAS_SPRITE_6,
    ATLAS_SPRITE_7,
    ATLAS_SPRITE_8,
    ATLAS_SPRITE_9,
    ATLAS_SPRITE_MENU_SLICE_TOPLEFT,
    ATLAS_SPRITE_MENU_SLICE_TOP,
    ATLAS_SPRITE_MENU_SLICE_TOPRIGHT,
    ATLAS_SPRITE_MENU_SLICE_LEFT,
    ATLAS_SPRITE_MENU_SLICE_CENTER,
    ATLAS_SPRITE_MENU_SLICE_RIGHT,
    ATLAS_SPRITE_MENU_SLICE_BOTTOMLEFT,
    ATLAS_SPRITE_MENU_SLICE_BOTTOM,
    ATLAS_SPRITE_MENU_SLICE_BOTTOMRIGHT,

    ATLAS_SPRITE_COUNT
} AtlasSprite;

void get_atlas_sprite_rect(AtlasSprite id, Rect *r);
bool update_timer(Timer *timer, float ms);

#endif /* COMMON_H */
